<% 
# Copyright (C)2016, International Business Machines Corporation
# All rights reserved.
%>
#include <SPL/Runtime/Common/Metric.h>
#include <SPL/Runtime/Function/MathFunctions.h>
#include <SPL/Runtime/Function/CollectionFunctions.h>
<%
	SPL::CodeGen::headerPrologue($model);

	my $outputPort = $model->getOutputPortAt(0);
	my $tupleType = $outputPort->getCppTupleType();
%>

class MY_OPERATOR : public MY_BASE_OPERATOR 
{
	public:
		// Constructor
		MY_OPERATOR();

		// Destructor
		virtual ~MY_OPERATOR();

		// Notify port readiness
		void allPortsReady();

		// Notify pending shutdown
		void prepareToShutdown();

		// Tuple processing for mutating ports 
		void process(Tuple & tuple, uint32_t port);

		// Tuple processing for non-mutating ports
		void process(Tuple const & tuple, uint32_t port);

		// Punctuation processing
		void process(Punctuation const & punct, uint32_t port);

	private:
	    Mutex _mutex;
	    
		Metric &_nDocuments;
		Metric &_nTerms;

		std::string makeAbsolute(const std::string & path);

		/**
		 * Reads the corpus file and fills the map
		 */
		bool readCorpusFile(const SPL::rstring& filename);

		/**
		 * Retrieve the IDF for the specified term.
		 * Inverse Document Frequency, how important a term is,
		 * logarithm of the number of the documents in the corpus divided
		 * by the number of documents where the specific term appears.
		 */
		inline float64 getIDF(const SPL::rstring& term) {
			if (false == SPL::Functions::Collections::has(_termsMap, term))
				return _idfDefault;
			return SPL::Functions::Math::log((float64)(1 + _numDocuments) / (1 + _termsMap[term]));
		}

		/**
		 * Retrieve the Term Frequency for the specified term.
		 * (number of times term appears in a document) / (total number of terms in the document)
		 */
		inline float getTF(const SPL::rstring& term, const uint64 nTermsInDoc) {
			return (float64)_termsInCurrentDocument[term]/nTermsInDoc;
		}

		/**
		 * Tuple to be sent.
		 */
		<%=$tupleType%> _tuple;

		/**
		 * Default IDF value
		 */
		float64 _idfDefault;

		/**
		 * The number of top weighted terms to be part of the output list
		 * (value 0 means all terms)
		 */
		uint32 _nTopWeightedTerms;

		/**
		 * The corpus file name
		 */
		SPL::rstring _corpusFile;

		/**
		 * The number of documents used to build the corpus file
		 */
		SPL::uint64 _numDocuments;

		/**
		 * The term and its frequency in the corpus
		 */
		SPL::map<SPL::rstring, SPL::uint64> _termsMap;

		/**
		 * The term and its frequency in the document (tuple)
		 */
		SPL::map<SPL::rstring, SPL::uint64> _termsInCurrentDocument;
}; 

<%SPL::CodeGen::headerEpilogue($model);%>

