<?xml version="1.0" encoding="UTF-8"?>
<!-- Copyright (C)2016, International Business Machines Corporation -->
<!-- All rights reserved.                                -->
<functionModel xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.ibm.com/xmlns/prod/streams/spl/function" xmlns:cmn="http://www.ibm.com/xmlns/prod/streams/spl/common" xsi:schemaLocation="http://www.ibm.com/xmlns/prod/streams/spl/function functionModel.xsd">
	<functionSet>
		<headerFileName>TextUtilsFunctions.h</headerFileName>
		<cppNamespaceName>com::ibm::streamsx::text::utils</cppNamespaceName>
		<functions>
			<function>
				<description><![CDATA[
Initialize and read lexicon files from default directory (<toolkit_dir>/etc/gposttl)
@return
On success, `true` is returned. On error, `false` is returned.
				]]></description>
				<prototype><![CDATA[ public stateful boolean initializeLemmatizer() ]]></prototype>
			</function>
<function>
				<description><![CDATA[
Initialize and read lexicon files from given directory
@param directory
The directory to the lexicon files
@return
On success, `true` is returned. On error, `false` is returned.
				]]></description>
				<prototype><![CDATA[ public stateful boolean initializeLemmatizer(rstring directory) ]]></prototype>
			</function>
			<function>
				<description><![CDATA[
PoS-tagging and lemmatizing of the input text
@param text
Text for lemmatizing
@param words
List of used words of the text as output
@param pos
Part-of-Speech tag output
@param lemmas
Lemma output
				]]></description>
				<prototype><![CDATA[ public stateful void lemmatize(rstring text, mutable list<rstring> words, mutable list<rstring> pos, mutable list<rstring> lemmas) ]]></prototype>
			</function>
			<function>
				<description><![CDATA[
Lemmatizing of the input text
@param text
Text for lemmatizing
@param lemmas
Lemma output
				]]></description>
				<prototype><![CDATA[ public stateful void lemmatize(rstring text, mutable list<rstring> lemmas) ]]></prototype>
			</function>
			<function>
				<description><![CDATA[
Generates n-grams of co-occuring words within a given window
@param words
Text for n-gram generation
@param size
The number of words combined to a new term
@param terms
Generated n-gram output
				]]></description>
				<prototype><![CDATA[ public stateful void generateNgram(list<rstring> words, uint32 size, mutable list<rstring> terms) ]]></prototype>
			</function>
			<function>
				<description><![CDATA[
Generates a set of n-grams of co-occuring words within a given window.
For example: If the maxSize parameter is 3 and minSize is 1 then unigrams, bigrams and trigrams are generated.
@param words
Text for n-gram generation
@param minSize
The number of words combined to a new term
@param maxSize
The number of words combined to a new term
@param terms
Generated n-gram output
				]]></description>
				<prototype><![CDATA[ public stateful void generateNgram(list<rstring> words, uint32 minSize, uint32 maxSize, mutable list<rstring> terms) ]]></prototype>
			</function>
		</functions>		
		<dependencies>
			<library>
				<cmn:description>Text Toolkit Tag Functions</cmn:description>
				<cmn:managedLibrary>
					<cmn:lib>streamsx-tk-text-utils</cmn:lib>
					<cmn:libPath>../../../impl/lib</cmn:libPath>
					<cmn:includePath>../../../impl/include/libtextutils</cmn:includePath>
				</cmn:managedLibrary>
			</library>
			<library>
				<cmn:description>Text Toolkit Tag Functions</cmn:description>
				<cmn:managedLibrary>
					<cmn:lib>GPoSTTL</cmn:lib>
					<cmn:libPath>../../../impl/lib</cmn:libPath>
					<cmn:includePath>../../../impl/include/gposttl</cmn:includePath>
				</cmn:managedLibrary>
			</library>			
		</dependencies>
	</functionSet>
	<functionSet>
		<headerFileName>UtilsFunctions.h</headerFileName>
		<cppNamespaceName>com::ibm::streamsx::text::utils</cppNamespaceName>
		<functions>
			<function>
				<description><![CDATA[
Get the toolkit root directory.
				]]></description>
				<prototype><![CDATA[ public stateful rstring getToolkitPath() ]]></prototype>
			</function>
		</functions>		
		<dependencies>	
			<library>
				<cmn:description>Text Toolkit Helper Functions</cmn:description>
				<cmn:managedLibrary>
					<cmn:lib></cmn:lib>
					<cmn:libPath></cmn:libPath>
					<cmn:includePath>../../../impl/include/libtextutils</cmn:includePath>
				</cmn:managedLibrary>
			</library>		
		</dependencies>
	</functionSet>
</functionModel>
